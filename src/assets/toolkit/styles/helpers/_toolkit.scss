// Rem output with px fallback
@mixin font-size($sizeValue: 1) {
    font-size: ($sizeValue * 16) * 1px;
    font-size: $sizeValue * 1rem;
}

// Center block
@mixin center-block {
    display: block;
    margin-left: auto;
    margin-right: auto;
}

// Clearfix
@mixin clearfix() {
    content: "";
    display: table;
    table-layout: fixed;
}

// Clear after (not all clearfix need this also)
@mixin clearfix-after() {
    clear: both;
}

// Column width with margin
@mixin column-width($numberColumns: 3) {
    width: map-get( $columns, $numberColumns ) - ( ( $columns__margin * ( $numberColumns - 1 ) ) / $numberColumns );
}

@function get-default($conf: (),$key:default) {
    @return  map-get($conf, $key);

}

@mixin breakpoint($class) {
    @if $class == xs {
        @media (max-width: $screen-xs-max) {
            @content;
        }
    } @else if $class == sm {
        @media (min-width: $screen-sm-min) and (max-width: $screen-sm-max) {
            @content;
        }
    } @else if $class == md {
        @media (min-width: $screen-md-min) and (max-width: $screen-md-max) {
            @content;
        }
    } @else if $class == lg {
        @media (min-width: $screen-lg-min) {
            @content;
        }
    } @else {
        @warn "Breakpoint mixin supports: xs, sm, md, lg";
    }
}

@mixin vertical-align($position: relative) {
    position: $position;
    top: 50%;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
}

@function extend($obj, $ext-obj) {
    @return map-merge($obj, $ext-obj);
}


@function getTextStyle($key) {
    //@return map-get($type-style,$key);
}

@mixin typeset($conf: (),$self:false) {
    // Extending the default arguments with the given object
    $conf: extend($type-body-copy-default, $conf);
    #{map-get($conf, name)} {
        color: map-get($conf, color);
        font-size: map-get($conf, font-size ) * $type-scale;
        font-family: map-get($conf, font-family);
        text-decoration: map-get($conf, text-decoration);
        text-transform: map-get($conf, text-transform);
        letter-spacing: map-get($conf, letter-spacing )*$type-scale;
        line-height: map-get($conf, line-height);
    }
}

@mixin grid-item($conf: ()) {
    // Extending the default arguments with the given object
    $conf: extend((
            columns: 3,
            col-sm:2,
            col-xs: 1,
            height: auto,
            color: #474747,
            background: #EEEBE9,
            duration: 250ms,
            name: '.grid-item',
            border: true,
            padding:20px,
            border-color: #979797
    ), $conf);
    // Dumping CSS
    #{map-get($conf, name)} {
        width: 100% / map-get($conf, columns);
        height: map-get($conf, height);
        animation: fade map-get($conf, duration);
        padding: map-get($conf, padding);
        background: map-get($conf, background);
        color: map-get($conf, color);

        @if map-get($conf, border) == true {
            border: 1px solid map-get($conf, border-color);
        }
        @if map-has-key($conf, col-sm) {
            @include breakpoint(sm) {
                display: block;
                width: 100% / map-get($conf, col-sm);
            }
        }
        @if map-has-key($conf, col-xs) {
            @include breakpoint(xs) {
                display: block;
                width: 100% / map-get($conf, col-xs);
            }
        }
    }
}

@mixin flexgrid($conf: (),$self:false) {
    // Extending the default arguments with the given object
    $conf: extend((
            width: 100%,
            flex-direction: row,
            flex-wrap: wrap,
            name: '.post-grid',
    ), $conf);

    @if $self == true {
        width: map-get($conf, width);
        display: -ms-flexbox;
        display: -webkit-flex;
        display: flex;
        -webkit-flex-direction: map-get($conf, flex-direction);
        -ms-flex-direction: map-get($conf, flex-direction);
        flex-direction: map-get($conf, flex-direction);
        -webkit-flex-wrap: map-get($conf, flex-wrap);
        -ms-flex-wrap: map-get($conf, flex-wrap);
        flex-wrap: map-get($conf, flex-wrap);
    } @else {
        #{map-get($conf, name)} {
            width: map-get($conf, width);
            display: -ms-flexbox;
            display: -webkit-flex;
            display: flex;
            -webkit-flex-direction: map-get($conf, flex-direction);
            -ms-flex-direction: map-get($conf, flex-direction);
            flex-direction: map-get($conf, flex-direction);
            -webkit-flex-wrap: map-get($conf, flex-wrap);
            -ms-flex-wrap: map-get($conf, flex-wrap);
            flex-wrap: map-get($conf, flex-wrap);
        }
    ;
    }
}

@function map-deep-get($map, $keys...) {
    $value: $map;
    @each $key in $keys {
        $value: map-get($value, $key);
    }
    @return $value;
}
@function map-deep-set($map, $keys…/*, $value */) {
   /* $map-list: ($map,);
    $result: null;
    @if length($keys) == 2 {
        @return map-merge($map, (nth($keys, 1): nth($keys, -1)));
    }
    @for $i from 1 through length($keys) — 2 {
$map-list: append($map-list, map-get(nth($map-list, -1), nth($keys, $i)));
}
@for $i from length($map-list) through 1 {
$result: map-merge(nth($map-list, $i), (nth($keys, $i): if($i == length($map-list), nth($keys, -1), $result)));
}*/
@return $map;
}

// a map-set function (not included with Sass)
@function map-set($map, $key, $value) {
    $new: ($key: $value);
    @return map-merge($map, $new);
}

@function map-swap-key($map, $key, $keyInv) {

    $map1 : map_get($map,$key);
    $mapswap : map_get($map,$keyInv);

    $new: (
            $key: $mapswap,
            $keyInv: $map1,
    );
    @return map-merge($map, $new);
}

@mixin doTypeset($conf: (),$self:false) {
    // Extending the default arguments with the given object
    $conf: extend(map_get($type-style, 'default'), $conf);

    $modularscale: map-get($conf, modularscale);
    @include ms-respond(font-size, 0);

    font-family: map-get($conf, font-family);
    text-transform: map-get($conf, text-transform);
    text-decoration: map-get($conf, text-decoration);
    font-weight: map-get($conf, font-weight);
    letter-spacing: map-get($conf, letter-spacing )*$type-scale;
    $children: map-get($conf, children);
    @each $selector, $sizeval in $children {
        @debug $sizeval;
        #{$selector} {
            @include ms-respond(font-size, $sizeval);
        }
    }
}
@mixin component($selector: 'generic-component',$confContainer: get-default($containerset), $confTheme: get-default($themeset),$confType : get-default($type-style)) {
 #{$selector} {
   @include container($confContainer, $confTheme);
        @include doTypeset($confType);
        @content;
    }
}
@mixin container($confContainer: get-default($containerset), $confTheme: get-default($themeset)) {
    // Extending the default arguments with the given object
    $conf: $confContainer;

    $confTheme: extend(get-default($themeset), $confTheme);

    //from default container
    //dump css without a selector
    width: map-get($conf, width);
    height: map-get($conf, height);
    animation: fade map-get($conf, duration);
    padding: map-get($conf, padding);
    border-width: map-get($conf, border-width);
    border-style: map-get($conf, border-style);
    text-align: map_get($conf, text-align);
    overflow: map_get($conf, overflow);
    //from themeset
    background: map_get($confTheme, background);
    color: map_get($confTheme, foreground);
    border-color: map_get($confTheme, border);

    //content add ons.
    $accented: map-get($conf, accentSelector);
    #{$accented} {
        color: map_get($confTheme, border);
    }

    $children-content: map-get($conf, child-content);
    @each $selector, $placeholder in $children-content {
        #{$selector} {
            @extend %#{$placeholder} !optional;
        }
    }
    @content;
}